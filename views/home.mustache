<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Fear Survival</title>
    <link rel="stylesheet" href="home.css">
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="joystick-container" style="position: relative; width: 100%; height: 100vh;">
    
</div>

    <script src="joystick.js"></script>
    <script>
        const controllerDiv = document.getElementById('joystick-container');

        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Set canvas size to full-screen initially
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        // Virtual grid size
        const gridWidth = 1000;
        const gridHeight = 1000;

        // Scroll offsets
        let offsetX = 0;
        let offsetY = 0;

        // Touch tracking
        let lastTouchX = 0;
        let lastTouchY = 0;

        // Grid drawing function
        const drawGrid = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            ctx.strokeStyle = '#ccc';
            ctx.lineWidth = 1;

            // Draw vertical lines
            for (let x = 0; x <= gridWidth; x += 50) {
                ctx.beginPath();
                ctx.moveTo(x - offsetX, 0 - offsetY);
                ctx.lineTo(x - offsetX, gridHeight - offsetY);
                ctx.stroke();
            }

            // Draw horizontal lines
            for (let y = 0; y <= gridHeight; y += 50) {
                ctx.beginPath();
                ctx.moveTo(0 - offsetX, y - offsetY);
                ctx.lineTo(gridWidth - offsetX, y - offsetY);
                ctx.stroke();
            }
        };

        // Scroll handler for mouse wheel
        const handleWheelScroll = (e) => {
            offsetX += e.deltaX;
            offsetY += e.deltaY;
            constrainOffsets();
            drawGrid();
        };

        // Touch event handlers
        const handleTouchStart = (e) => {
            const touch = e.touches[0];
            lastTouchX = touch.clientX;
            lastTouchY = touch.clientY;
        };

        const handleTouchMove = (e) => {
            e.preventDefault(); // Prevent native scrolling

            const touch = e.touches[0];
            const deltaX = lastTouchX - touch.clientX;
            const deltaY = lastTouchY - touch.clientY;

            offsetX += deltaX;
            offsetY += deltaY;

            lastTouchX = touch.clientX;
            lastTouchY = touch.clientY;

            constrainOffsets();
            drawGrid();
        };

        // Constrain scrolling within grid boundaries
        const constrainOffsets = () => {
            offsetX = Math.max(0, Math.min(offsetX, gridWidth - canvas.width));
            offsetY = Math.max(0, Math.min(offsetY, gridHeight - canvas.height));
        };

        // Attach event listeners
        canvas.addEventListener('wheel', handleWheelScroll); // For PC
        canvas.addEventListener('touchstart', handleTouchStart); // For Mobile (start of touch)
        canvas.addEventListener('touchmove', handleTouchMove); // For Mobile (move of touch)

        window.onload = function () {
            // Initial draw
            drawGrid();
            setupJoystick(controllerDiv);
        }

        controllerDiv.addEventListener('move', function (e) {
            const { deltaX, deltaY } = e.detail;
            alert(`Joystick moved! DeltaX: ${deltaX}, DeltaY: ${deltaY}`);
        });
    </script>
</body>
</html>
